function pushbutton1_Callback(hObject, eventdata, handles)
x1={};% создает пустой массив для переменной
x1{1}= get(handles.edit1,'String');  % Найдите в help функцию, которая берет информацию с любого элемента GUI-окна и примените её к данному коду и коду ниже
x1{2}= get(handles.edit2,'String');  % Изучите принцип работы данной функции
x1{3}= get(handles.edit3,'String');
x1{4}= get(handles.edit4,'String');
x1{5}= get(handles.edit5,'String');

x2={};% создает пустой массив для переменной
x2{1}= get(handles.edit7,'String');
x2{2}= get(handles.edit8,'String');
x2{3}= get(handles.edit9,'String');
x2{4}= get(handles.edit10,'String');
x2{5}= get(handles.edit11,'String');

x3={};% создает пустой массив для переменной
x3{1}= get(handles.edit13,'String');
x3{2}= get(handles.edit14,'String');
x3{3}= get(handles.edit15,'String');
x3{4}= get(handles.edit16,'String');
x3{5}= get(handles.edit17,'String');

x4={};% создает пустой массив для переменной
x4{1}= get(handles.edit19,'String'); 
x4{2}= get(handles.edit20,'String');
x4{3}= get(handles.edit21,'String');
x4{4}= get(handles.edit22,'String');
x4{5}= get(handles.edit23,'String');

F_tab={}; % Коэф Фишера
F_tab{1}= get(handles.edit25,'String'); %  Считывание информации с окошка табличного значения Коэфициента Фишера
x1= str2double(x1); % Найдите в help функцию, которая осуществоляет перевод текстового формата информации, которая хранится в переменной, в числовой
x2= str2double(x2);
x3= str2double(x3);
x4= str2double(x4);
F_tab= str2double(F_tab);

for i=1:5
   if   isempty (x1(i))==1 ||isempty(F_tab)==1 % Найдите в help функцию, которая проверяет условие пустоты массива (переменной). Отвечает на вопрос: пустой ли массив?
       fprintf('Ошибка ввода данных!!! Программа прервана...\n')
    return
   end
    if  isempty  (x2(i))==1||isempty(F_tab)==1 % Найдите в help функцию, которая проверяет условие пустоты массива (переменной). Отвечает на вопрос: пустой ли массив?
       fprintf('Ошибка ввода данных!!! Программа прервана...\n')
    return
   end
       if  isempty  (x3(i))==1||isempty(F_tab)==1 % Найдите в help функцию, которая проверяет условие пустоты массива (переменной). Отвечает на вопрос: пустой ли массив?
       fprintf('Ошибка ввода данных!!! Программа прервана...\n')
    return
       end
    if  isempty  (x4(i))==1||isempty(F_tab)==1 % Найдите в help функцию, которая проверяет условие пустоты массива (переменной). Отвечает на вопрос: пустой ли массив?
       fprintf('Ошибка ввода данных!!! Программа прервана...\n')
    return
   end
end

% 
% %%-----------Laba 6------------------
% % 
% %% % ----- Расчеты -----
% 
% % --- Среднее арифметическое отклонение первого уровня
% 
% % Для будущего расчета дисперсий на разных уровнях необходимо посчитать
% % среднее арифметическое для каждых из уровней (см. формулы в лабораторной)
% 
% X=[x1;x2;x3;x4]; % Объединяем данные в одну переменную для удобвства
% for i=1:4
% yi(i)=sum(X(i,:))/length(X(i,:)); % Тут необходимо по формуле среднего арифм. создать сумму масива и поделить на его длину того же массива. Функции для реализации были рассмотрены в предидущей лаб.
% end % Что выполняет запись "(i,:)" в даных переменных?
% 
% fprintf('Среднее арифметическое отклонение первого уровня, \n y1=%1.4f ; \n y2=%1.4f ; \n y3=%1.4f ; \n y4=%1.4f .\n',yi)
% 
% % -- Заносим результат расчетов среднего отклонения в таблицу
% for i=1:4
% yi_txt{i}=num2str(yi(i)); % Найдите в help функцию, которая переводит числовой формат данных в текстовый формат. 
% end
% 
% set(handles.edit21,'String',yi_txt{1}) % Найдите в help функцию, которая занесет наши расчитанные данные в GUI-окно программы
% set(handles.edit22,'String',yi_txt{2})
% set(handles.edit23,'String',yi_txt{3})
% set(handles.edit24,'String',yi_txt{4})
% % --% 
% % ---
% % % --- Среднее арифметическое второго уровня
% Y=sum(yi)/length(yi); % Посчитать среднее арфим. по аналогии с кодом, который был выше
% fprintf('Среднее арифметическое второго уровня Y=%1.4f\n',Y)
% % ---
% 
%  
% % ----- Дисперсия от случайных возбуждений (Se) -------
% 
% % Зная среднее арифметическое разных уровней мы можем посчитать дисперсию
% % разных уровней
% 
% yij=[x1;x2;x3;x4];
% 
% for i=1:4
% Se(i)=(sum(yij(i,:)-yi(i)).^2)   ; % По формуле представленной в л/р, используя переменные найденные выше (yij и yi), создайте формулу для рассчета квадрата отклонений в дисперсии Se
% 
% % Внимание! В данном месте расчитывается сумма квадрата отклонения для
% % каждой(!) серии исследований. Далее необходимо найти сумму сумм этих 
% % квадратов отклонений и поделить на степень свободы. Программа должна 
% % автоматично рассчитывать степень свободы для вашего случая! 
% 
% % Учтите, что в блоке программы для расчета дисперсий уже рассчитываются
% % квадраты дисперсий.
% end
% 
% Se=sum(Se)/(length(yij(:,1))*length(x1)-1); % Для верного создания степени свободы нужно использовать функции длинны массивов с переменными yij и x1
% % Перед (Se) нужно использовать функцию суммы
% fprintf('Дисперсия от случайных возбуждений, Se=%1.4f\n',Se)
% % ---------
% % -----  Дисперсия от исследуемого фактора (Si)  ------
% Si=(sum(yi-Y).^2)/(length(yi)-1); % Аналогично формуле для дисперсии выше, а так же с помощью формулы представленной в л/р, используя переменные найденные выше (yi и Y), создайте формулу для рассчета дисперсии Si
% % Внимание! В данной формуле можно сразу описать операцию деления на
% % степень свободы, которая формируется с помощью одной переменной (yi). Для
% % понимания почему происходит упрощение формулы смотрите теорию л/р
% 
% fprintf('Дисперсия от исследуемого фактора, Si=%1.4f\n',Si)
% %------
% % ----------   Общая дисперсия (Sy) ------------
% for i=1:4
% Sy(i)=(sum((yij(i,:)-Y).^2)); % Аналогично формуле для дисперсии Se, а так же с помощью формулы представленной в л/р, используя переменные найденные выше (yij и Y), создайте формулу для рассчета дисперсии Sy
% 
% % Внимание! В данном месте расчитывается сумма квадрата отклонения для
% % каждой(!) серии исследований. Далее необходимо найти сумму сумм этих 
% % квадратов отклонений и поделить на степень свободы. Программа должна 
% % автоматично рассчитывать степень свободы для вашего случая! 
% 
% end
% Sy=sum(Sy)/((length(yij(:,1))*length(x1))-1);% Для верного создания степени свободы нужно использовать функции длинны массивов с переменными yij и x1
% % Перед (Sy) нужно использовать функцию суммы
% fprintf('Общая дисперсия, Sy=%1.4f\n',Sy)
% 
% %-----------
% % 
% % ----- Критерий Фишера ---------
% F=Si/Se; % Расчитайте коэфициент Фишера с помощью квадратов дисперсий, расчитаных выше
% fprintf('Расчитаный критерий Фишера, F=%1.4f\n',F)
% 
% fad=length(yi)-1;% Используя нужную переменную создайте расчет степени свободы числителя (!) для Коэф. Фишера по формуле представленной в л/р
% fy=length(yij(:,1))*(length(x1)-1);% Используя нужную переменную создайте расчет степени свободы знаменателя (!) для Коэф. Фишера по формуле представленной в л/р
% fprintf('Степень свободы числителя, fad=%1.4f\n',fad)
% fprintf('Степень свободы знаменателя, fy=%1.4f\n',fy)
% 
% if F_tab<=F % Создайте условие сравнения рассчитанного и табличного значения коэф. Фишера соответственно коду выполнения условия, представленного 
%     fprintf('Гипотеза верна!\n')
%      set  (handles.text25,'String','Гипотеза верна!') % Используя функцию вывода информации в GUI-окно отобразить результат проверки гипотезы
% % Как работает данная строка выше?
%        
% else
%     fprintf('Гипотеза НЕ верна!\n')
%      set(handles.text25,'String','Гипотеза НЕ верна!') % Используя функцию вывода информации в GUI-окно отобразить результат проверки гипотезы
% end
% % -------------------------------

